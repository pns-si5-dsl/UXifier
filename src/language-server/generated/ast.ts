/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export interface Application extends AstNode {
    configs: Array<Context>
    fields: Array<FieldDecl>
    games: Array<Context>
    name: string
}

export const Application = 'Application';

export function isApplication(item: unknown): item is Application {
    return reflection.isInstance(item, Application);
}

export interface ButtonComponent extends AstNode {
    readonly $container: PageDecl;
    color: COLOR
    href: string
    name: string
}

export const ButtonComponent = 'ButtonComponent';

export function isButtonComponent(item: unknown): item is ButtonComponent {
    return reflection.isInstance(item, ButtonComponent);
}

export interface COLOR extends AstNode {
    readonly $container: ButtonComponent | TextComponent;
    value: string
}

export const COLOR = 'COLOR';

export function isCOLOR(item: unknown): item is COLOR {
    return reflection.isInstance(item, COLOR);
}

export interface Context extends AstNode {
    readonly $container: Application;
    name: string
    navigation: NAVIGATION
    pages: Array<PageDecl>
}

export const Context = 'Context';

export function isContext(item: unknown): item is Context {
    return reflection.isInstance(item, Context);
}

export interface DecoField extends AstNode {
    readonly $container: FieldsComponent;
    field: Reference<FieldDecl>
}

export const DecoField = 'DecoField';

export function isDecoField(item: unknown): item is DecoField {
    return reflection.isInstance(item, DecoField);
}

export interface FieldDecl extends AstNode {
    readonly $container: Application;
    name: string
    type: TYPE
}

export const FieldDecl = 'FieldDecl';

export function isFieldDecl(item: unknown): item is FieldDecl {
    return reflection.isInstance(item, FieldDecl);
}

export interface FieldsComponent extends AstNode {
    readonly $container: PageDecl;
    decoFields: Array<DecoField>
    name: string
}

export const FieldsComponent = 'FieldsComponent';

export function isFieldsComponent(item: unknown): item is FieldsComponent {
    return reflection.isInstance(item, FieldsComponent);
}

export interface ImageComponent extends AstNode {
    readonly $container: PageDecl;
    name: string
    source: string
}

export const ImageComponent = 'ImageComponent';

export function isImageComponent(item: unknown): item is ImageComponent {
    return reflection.isInstance(item, ImageComponent);
}

export interface PageDecl extends AstNode {
    readonly $container: Context;
    axe: AXE
    components: Array<ButtonComponent | TextComponent | ImageComponent | FieldsComponent>
    name: string
    skipable: boolean
}

export const PageDecl = 'PageDecl';

export function isPageDecl(item: unknown): item is PageDecl {
    return reflection.isInstance(item, PageDecl);
}

export interface TextComponent extends AstNode {
    readonly $container: PageDecl;
    color: COLOR
    name: string
    value: string
}

export const TextComponent = 'TextComponent';

export function isTextComponent(item: unknown): item is TextComponent {
    return reflection.isInstance(item, TextComponent);
}

export type TYPE = 'bool' | 'number' | 'string'

export type NAVIGATION = 'linear' | 'side' | 'bottom'

export type AXE = 'horizontal' | 'vertical'

export type UxifierAstType = 'Application' | 'ButtonComponent' | 'COLOR' | 'Context' | 'DecoField' | 'FieldDecl' | 'FieldsComponent' | 'ImageComponent' | 'PageDecl' | 'TextComponent';

export type UxifierAstReference = 'DecoField:field';

export class UxifierAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Application', 'ButtonComponent', 'COLOR', 'Context', 'DecoField', 'FieldDecl', 'FieldsComponent', 'ImageComponent', 'PageDecl', 'TextComponent'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: UxifierAstReference): string {
        switch (referenceId) {
            case 'DecoField:field': {
                return FieldDecl;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new UxifierAstReflection();
