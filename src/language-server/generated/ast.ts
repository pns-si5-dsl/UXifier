/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export interface AffectDecl extends AstNode {
    readonly $container: SkillField_;
    value: string
}

export const AffectDecl = 'AffectDecl';

export function isAffectDecl(item: unknown): item is AffectDecl {
    return reflection.isInstance(item, AffectDecl);
}

export interface AlignDecl extends AstNode {
    readonly $container: StyleDecl;
    value: ALIGN
}

export const AlignDecl = 'AlignDecl';

export function isAlignDecl(item: unknown): item is AlignDecl {
    return reflection.isInstance(item, AlignDecl);
}

export interface AreaLine extends AstNode {
    readonly $container: PageArea;
    components: Array<Reference<Component>>
}

export const AreaLine = 'AreaLine';

export function isAreaLine(item: unknown): item is AreaLine {
    return reflection.isInstance(item, AreaLine);
}

export interface BorderColorDecl extends AstNode {
    readonly $container: StyleDecl;
    value: COLOR
}

export const BorderColorDecl = 'BorderColorDecl';

export function isBorderColorDecl(item: unknown): item is BorderColorDecl {
    return reflection.isInstance(item, BorderColorDecl);
}

export interface BoxColorDecl extends AstNode {
    readonly $container: StyleDecl;
    value: COLOR
}

export const BoxColorDecl = 'BoxColorDecl';

export function isBoxColorDecl(item: unknown): item is BoxColorDecl {
    return reflection.isInstance(item, BoxColorDecl);
}

export interface CharSheet extends AstNode {
    configs: Array<Context>
    fields: Array<Field>
    games: Array<Context>
    name: string
}

export const CharSheet = 'CharSheet';

export function isCharSheet(item: unknown): item is CharSheet {
    return reflection.isInstance(item, CharSheet);
}

export interface COLOR extends AstNode {
    readonly $container: ColorDecl | BorderColorDecl | BoxColorDecl | TextColorDecl;
    value: string
}

export const COLOR = 'COLOR';

export function isCOLOR(item: unknown): item is COLOR {
    return reflection.isInstance(item, COLOR);
}

export interface ColorDecl extends AstNode {
    readonly $container: TextComponent | GaugeDecoField;
    value: COLOR
}

export const ColorDecl = 'ColorDecl';

export function isColorDecl(item: unknown): item is ColorDecl {
    return reflection.isInstance(item, ColorDecl);
}

export interface Component extends AstNode {
    readonly $container: Page | ComponentBoxComponent;
    name: string
    styles: Array<StyleDecl>
    titles: Array<TitleDecl>
}

export const Component = 'Component';

export function isComponent(item: unknown): item is Component {
    return reflection.isInstance(item, Component);
}

export interface ContentDecl extends AstNode {
    readonly $container: TextComponent;
    value: string
}

export const ContentDecl = 'ContentDecl';

export function isContentDecl(item: unknown): item is ContentDecl {
    return reflection.isInstance(item, ContentDecl);
}

export interface Context extends AstNode {
    readonly $container: CharSheet;
    name: string
    navigation: NAVIGATION
    pages: Array<Page>
}

export const Context = 'Context';

export function isContext(item: unknown): item is Context {
    return reflection.isInstance(item, Context);
}

export interface DecoField extends AstNode {
    readonly $container: FieldGroupComponent;
    field: Reference<Field>
    input: boolean
    output: boolean
    styles: Array<StyleDecl>
}

export const DecoField = 'DecoField';

export function isDecoField(item: unknown): item is DecoField {
    return reflection.isInstance(item, DecoField);
}

export interface DescriptionDecl extends AstNode {
    readonly $container: CheckField_ | SkillField_;
    value: string
}

export const DescriptionDecl = 'DescriptionDecl';

export function isDescriptionDecl(item: unknown): item is DescriptionDecl {
    return reflection.isInstance(item, DescriptionDecl);
}

export interface DirectionDecl extends AstNode {
    readonly $container: StyleDecl;
    value: AXE
}

export const DirectionDecl = 'DirectionDecl';

export function isDirectionDecl(item: unknown): item is DirectionDecl {
    return reflection.isInstance(item, DirectionDecl);
}

export interface Field extends AstNode {
    readonly $container: CharSheet;
    initials: Array<InitDecl>
    name: string
}

export const Field = 'Field';

export function isField(item: unknown): item is Field {
    return reflection.isInstance(item, Field);
}

export interface HrefDecl extends AstNode {
    readonly $container: ButtonComponent;
    value: string
}

export const HrefDecl = 'HrefDecl';

export function isHrefDecl(item: unknown): item is HrefDecl {
    return reflection.isInstance(item, HrefDecl);
}

export interface InitDecl extends AstNode {
    readonly $container: Field;
    value: BOOLEAN | number | string
}

export const InitDecl = 'InitDecl';

export function isInitDecl(item: unknown): item is InitDecl {
    return reflection.isInstance(item, InitDecl);
}

export interface MaxDecl extends AstNode {
    readonly $container: IntField_ | StatField_;
    value: number
}

export const MaxDecl = 'MaxDecl';

export function isMaxDecl(item: unknown): item is MaxDecl {
    return reflection.isInstance(item, MaxDecl);
}

export interface MaxLengthDecl extends AstNode {
    readonly $container: TextField_;
    value: number
}

export const MaxLengthDecl = 'MaxLengthDecl';

export function isMaxLengthDecl(item: unknown): item is MaxLengthDecl {
    return reflection.isInstance(item, MaxLengthDecl);
}

export interface MinDecl extends AstNode {
    readonly $container: IntField_ | StatField_;
    value: number
}

export const MinDecl = 'MinDecl';

export function isMinDecl(item: unknown): item is MinDecl {
    return reflection.isInstance(item, MinDecl);
}

export interface MinLengthDecl extends AstNode {
    readonly $container: TextField_;
    value: number
}

export const MinLengthDecl = 'MinLengthDecl';

export function isMinLengthDecl(item: unknown): item is MinLengthDecl {
    return reflection.isInstance(item, MinLengthDecl);
}

export interface Page extends AstNode {
    readonly $container: Context;
    areas: Array<PageArea>
    axe: AXE
    components: Array<Component>
    name: string
}

export const Page = 'Page';

export function isPage(item: unknown): item is Page {
    return reflection.isInstance(item, Page);
}

export interface PageArea extends AstNode {
    readonly $container: Page;
    device: SCREEN_SIZE
    filled: boolean
    lines: Array<AreaLine>
    name: 'area'
}

export const PageArea = 'PageArea';

export function isPageArea(item: unknown): item is PageArea {
    return reflection.isInstance(item, PageArea);
}

export interface RegexDecl extends AstNode {
    readonly $container: TextField_;
    value: string
}

export const RegexDecl = 'RegexDecl';

export function isRegexDecl(item: unknown): item is RegexDecl {
    return reflection.isInstance(item, RegexDecl);
}

export interface SelectionDecl extends AstNode {
    readonly $container: TextField_;
    values: Array<string>
}

export const SelectionDecl = 'SelectionDecl';

export function isSelectionDecl(item: unknown): item is SelectionDecl {
    return reflection.isInstance(item, SelectionDecl);
}

export interface ShapeDecl extends AstNode {
    readonly $container: StyleDecl;
    value: SHAPE
}

export const ShapeDecl = 'ShapeDecl';

export function isShapeDecl(item: unknown): item is ShapeDecl {
    return reflection.isInstance(item, ShapeDecl);
}

export interface SizeDecl extends AstNode {
    readonly $container: StyleDecl;
    value: SIZE | string
}

export const SizeDecl = 'SizeDecl';

export function isSizeDecl(item: unknown): item is SizeDecl {
    return reflection.isInstance(item, SizeDecl);
}

export interface SourceDecl extends AstNode {
    readonly $container: ImageComponent;
    value: string
}

export const SourceDecl = 'SourceDecl';

export function isSourceDecl(item: unknown): item is SourceDecl {
    return reflection.isInstance(item, SourceDecl);
}

export interface StatDecl extends AstNode {
    readonly $container: SkillField_;
    value: Reference<StatField_>
}

export const StatDecl = 'StatDecl';

export function isStatDecl(item: unknown): item is StatDecl {
    return reflection.isInstance(item, StatDecl);
}

export interface StyleDecl extends AstNode {
    readonly $container: Component | DecoField;
    aligns: Array<AlignDecl>
    borderColors: Array<BorderColorDecl>
    borderSizes: Array<SizeDecl>
    boxColors: Array<BoxColorDecl>
    directions: Array<DirectionDecl>
    heights: Array<SizeDecl>
    shapes: Array<ShapeDecl>
    textColors: Array<TextColorDecl>
    widths: Array<SizeDecl>
}

export const StyleDecl = 'StyleDecl';

export function isStyleDecl(item: unknown): item is StyleDecl {
    return reflection.isInstance(item, StyleDecl);
}

export interface TextColorDecl extends AstNode {
    readonly $container: StyleDecl;
    value: COLOR
}

export const TextColorDecl = 'TextColorDecl';

export function isTextColorDecl(item: unknown): item is TextColorDecl {
    return reflection.isInstance(item, TextColorDecl);
}

export interface TitleDecl extends AstNode {
    readonly $container: Component;
    value: string
}

export const TitleDecl = 'TitleDecl';

export function isTitleDecl(item: unknown): item is TitleDecl {
    return reflection.isInstance(item, TitleDecl);
}

export interface TitlePosDecl extends AstNode {
    readonly $container: ComponentBoxComponent | TextComponent | ImageComponent | FieldGroupComponent;
    value: TITLE_POS
}

export const TitlePosDecl = 'TitlePosDecl';

export function isTitlePosDecl(item: unknown): item is TitlePosDecl {
    return reflection.isInstance(item, TitlePosDecl);
}

export interface TypeDecl extends AstNode {
    readonly $container: ButtonComponent;
    value: BUTTON_TYPE
}

export const TypeDecl = 'TypeDecl';

export function isTypeDecl(item: unknown): item is TypeDecl {
    return reflection.isInstance(item, TypeDecl);
}

export interface ButtonComponent extends Component {
    hrefs: Array<HrefDecl>
    types: Array<TypeDecl>
}

export const ButtonComponent = 'ButtonComponent';

export function isButtonComponent(item: unknown): item is ButtonComponent {
    return reflection.isInstance(item, ButtonComponent);
}

export interface ComponentBoxComponent extends Component {
    components: Array<Component>
    titlePositions: Array<TitlePosDecl>
}

export const ComponentBoxComponent = 'ComponentBoxComponent';

export function isComponentBoxComponent(item: unknown): item is ComponentBoxComponent {
    return reflection.isInstance(item, ComponentBoxComponent);
}

export interface FieldGroupComponent extends Component {
    decoFields: Array<DecoField>
    titlePositions: Array<TitlePosDecl>
}

export const FieldGroupComponent = 'FieldGroupComponent';

export function isFieldGroupComponent(item: unknown): item is FieldGroupComponent {
    return reflection.isInstance(item, FieldGroupComponent);
}

export interface ImageComponent extends Component {
    sources: Array<SourceDecl>
    titlePositions: Array<TitlePosDecl>
}

export const ImageComponent = 'ImageComponent';

export function isImageComponent(item: unknown): item is ImageComponent {
    return reflection.isInstance(item, ImageComponent);
}

export interface TextComponent extends Component {
    colors: Array<ColorDecl>
    contents: Array<ContentDecl>
    titlePositions: Array<TitlePosDecl>
}

export const TextComponent = 'TextComponent';

export function isTextComponent(item: unknown): item is TextComponent {
    return reflection.isInstance(item, TextComponent);
}

export interface GaugeDecoField extends DecoField {
    highColors: Array<ColorDecl>
    lowColors: Array<ColorDecl>
}

export const GaugeDecoField = 'GaugeDecoField';

export function isGaugeDecoField(item: unknown): item is GaugeDecoField {
    return reflection.isInstance(item, GaugeDecoField);
}

export interface SimpleDecoField extends DecoField {
}

export const SimpleDecoField = 'SimpleDecoField';

export function isSimpleDecoField(item: unknown): item is SimpleDecoField {
    return reflection.isInstance(item, SimpleDecoField);
}

export interface CheckField_ extends Field {
    descriptions: Array<DescriptionDecl>
}

export const CheckField_ = 'CheckField_';

export function isCheckField_(item: unknown): item is CheckField_ {
    return reflection.isInstance(item, CheckField_);
}

export interface IntField_ extends Field {
    maxs: Array<MaxDecl>
    mins: Array<MinDecl>
}

export const IntField_ = 'IntField_';

export function isIntField_(item: unknown): item is IntField_ {
    return reflection.isInstance(item, IntField_);
}

export interface SkillField_ extends Field {
    affects: Array<AffectDecl>
    descriptions: Array<DescriptionDecl>
    stats: Array<StatDecl>
}

export const SkillField_ = 'SkillField_';

export function isSkillField_(item: unknown): item is SkillField_ {
    return reflection.isInstance(item, SkillField_);
}

export interface StatField_ extends Field {
    maxs: Array<MaxDecl>
    mins: Array<MinDecl>
}

export const StatField_ = 'StatField_';

export function isStatField_(item: unknown): item is StatField_ {
    return reflection.isInstance(item, StatField_);
}

export interface TextField_ extends Field {
    maxLengths: Array<MaxLengthDecl>
    minLengths: Array<MinLengthDecl>
    regexs: Array<RegexDecl>
    selections: Array<SelectionDecl>
}

export const TextField_ = 'TextField_';

export function isTextField_(item: unknown): item is TextField_ {
    return reflection.isInstance(item, TextField_);
}

export type BOOLEAN = 'true' | 'false'

export type NAVIGATION = 'linear' | 'side_menu' | 'bottom_menu'

export type AXE = 'horizontal' | 'vertical'

export type BUTTON_TYPE = 'primary' | 'secondary'

export type SIZE = 'xxsmall' | 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'auto'

export type SHAPE = 'rectangular' | 'circular'

export type ALIGN = 'left' | 'right' | 'center'

export type TITLE_POS = 'left' | 'top'

export type SCREEN_SIZE = 'smallScreen' | 'mediumScreen' | 'largeScreen'

export type UxifierAstType = 'AffectDecl' | 'AlignDecl' | 'AreaLine' | 'BorderColorDecl' | 'BoxColorDecl' | 'CharSheet' | 'COLOR' | 'ColorDecl' | 'Component' | 'ContentDecl' | 'Context' | 'DecoField' | 'DescriptionDecl' | 'DirectionDecl' | 'Field' | 'HrefDecl' | 'InitDecl' | 'MaxDecl' | 'MaxLengthDecl' | 'MinDecl' | 'MinLengthDecl' | 'Page' | 'PageArea' | 'RegexDecl' | 'SelectionDecl' | 'ShapeDecl' | 'SizeDecl' | 'SourceDecl' | 'StatDecl' | 'StyleDecl' | 'TextColorDecl' | 'TitleDecl' | 'TitlePosDecl' | 'TypeDecl' | 'ButtonComponent' | 'ComponentBoxComponent' | 'FieldGroupComponent' | 'ImageComponent' | 'TextComponent' | 'GaugeDecoField' | 'SimpleDecoField' | 'CheckField_' | 'IntField_' | 'SkillField_' | 'StatField_' | 'TextField_';

export type UxifierAstReference = 'AreaLine:components' | 'DecoField:field' | 'StatDecl:value';

export class UxifierAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['AffectDecl', 'AlignDecl', 'AreaLine', 'BorderColorDecl', 'BoxColorDecl', 'CharSheet', 'COLOR', 'ColorDecl', 'Component', 'ContentDecl', 'Context', 'DecoField', 'DescriptionDecl', 'DirectionDecl', 'Field', 'HrefDecl', 'InitDecl', 'MaxDecl', 'MaxLengthDecl', 'MinDecl', 'MinLengthDecl', 'Page', 'PageArea', 'RegexDecl', 'SelectionDecl', 'ShapeDecl', 'SizeDecl', 'SourceDecl', 'StatDecl', 'StyleDecl', 'TextColorDecl', 'TitleDecl', 'TitlePosDecl', 'TypeDecl', 'ButtonComponent', 'ComponentBoxComponent', 'FieldGroupComponent', 'ImageComponent', 'TextComponent', 'GaugeDecoField', 'SimpleDecoField', 'CheckField_', 'IntField_', 'SkillField_', 'StatField_', 'TextField_'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case ButtonComponent:
            case ComponentBoxComponent:
            case FieldGroupComponent:
            case ImageComponent:
            case TextComponent: {
                return this.isSubtype(Component, supertype);
            }
            case GaugeDecoField:
            case SimpleDecoField: {
                return this.isSubtype(DecoField, supertype);
            }
            case CheckField_:
            case IntField_:
            case SkillField_:
            case StatField_:
            case TextField_: {
                return this.isSubtype(Field, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: UxifierAstReference): string {
        switch (referenceId) {
            case 'AreaLine:components': {
                return Component;
            }
            case 'DecoField:field': {
                return Field;
            }
            case 'StatDecl:value': {
                return StatField_;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new UxifierAstReflection();
